<?php

namespace App\Services;

use App\Shared\ScanReport;
use Illuminate\Mail\Message;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Mail;

class ScanService
{

    protected ReportService $reportService;


    public function __construct(ReportService $reportService)
    {
        $this->reportService = $reportService;
    }

    protected function readScannerConfig(string $fileName): array
    {
        $configFileName = base_path('scanner-config/' . $fileName);
        if (File::exists($configFileName) === false) {
            return [];
        }
        return array_filter(explode("\n", file_get_contents($configFileName)));
    }

    public function getScanDirectories(): array
    {
        return $this->readScannerConfig('directories.txt');
    }

    public function getExcludedFiles(): array
    {
        return $this->readScannerConfig('excludes.txt');
    }

    public function getReportEmails(): array
    {
        return $this->readScannerConfig('report-emails.txt');
    }

    public function scanAndReportAll(): void
    {
        $foundMalwareReports = [];

        foreach ($this->getScanDirectories() as $directory) {
            $directoryReport = $this->scanDirectory($directory);

            if (true || $directoryReport->totalMalwareIdentified) {
                $foundMalwareReports[] = $directoryReport;
            }

        }

        if ($foundMalwareReports) {
            $this->sendMalwareReport($foundMalwareReports);
        }

    }

    public function scanDirectory(string $directory): ScanReport
    {
        $scanner = new \MalwareScanner(false);
        $scanner->setFlagDisableStats(false);
        $scanner->setFlagComments(true);
        $scanner->setFlagBase64(true);
        $scanner->setFlagHideOk(true);
        $scanner->setFlagHideWhitelist(true);
        ob_start();
        $scanner->run($directory);
        $output = explode("\n", ob_get_contents());
        return ScanReport::fromScannerOutput($output);
    }

    /**
     * @param ScanReport[] $reports
     * @return void
     */
    public function sendMalwareReport(array $reports): void
    {
        Mail::send('email.found-malware-report', ['reports' => $reports], function(Message $message)
        {
            $message
                ->subject('Found PHP malware');
            foreach ($this->getReportEmails() as $email) {
                $message->to($email);
            }
        });
    }

}
