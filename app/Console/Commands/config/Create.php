<?php

namespace App\Console\Commands\config;


use ErrorException;


class Create extends AbstractConfigCommand
{

    public $signature = 'config:create {--email-driver=} {--mail-from-address=} {--mail-from-name=} {--emails=} {--directories=} {--excludes=}';

    /**
     * @throws ErrorException
     */
    public function handle(): int
    {

        $mailConfigVars = [
            'ses' => [
                'AWS_ACCESS_KEY_ID' => config('services.ses.key'),
                'AWS_SECRET_ACCESS_KEY' => '***********',
                'AWS_DEFAULT_REGION' => config('services.ses.region'),
            ],
            'smtp' => [
                'MAIL_HOST' => config('mail.mailers.smtp.host'),
                'MAIL_PORT' => config('mail.mailers.smtp.port'),
                'MAIL_ENCRYPTION' => config('mail.mailers.smtp.encryption'),
                'MAIL_USERNAME' => config('mail.mailers.smtp.username'),
                'MAIL_PASSWORD' => config('mail.mailers.smtp.password'),
            ],
        ];


        $mailDriver = $this->askOptionOrEnv('MAIL_MAILER',  'email-driver', 'Mail driver', 'smtp', array_keys($mailConfigVars));

        if ($mailDriverVars = $mailConfigVars[$mailDriver]) {
            foreach ($mailDriverVars as $envName => $currentValue) {
                $newEnvValue = $this->ask($envName, $currentValue ?? '');
                if ($newEnvValue !== '***********') {
                    $this->setInDotenv($envName, $newEnvValue);
                }
            }
        }

        $this->askOptionOrEnv('MAIL_FROM_ADDRESS', 'mail-from-address', 'Mail From address');
        $this->askOptionOrEnv('MAIL_FROM_NAME', 'mail-from-name', 'Mail From name', config('app.name'));

        $this->askOptionOrConfig('emails', 'report-emails.txt', 'Emails list, comma-separated');
        $this->askOptionOrConfig('directories', 'directories.txt', 'Scan directories list, comma-separated');
        $this->askOptionOrConfig('excludes', 'excludes.txt', 'Exclude list, comma-separated');


        return 0;
    }


}
