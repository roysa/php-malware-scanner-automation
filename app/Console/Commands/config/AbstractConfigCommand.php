<?php

namespace App\Console\Commands\config;

use ErrorException;
use Illuminate\Console\Command;
use Symfony\Component\Dotenv\Dotenv;
use Illuminate\Support\Facades\File;

abstract class AbstractConfigCommand extends Command
{

    protected ?string $_dotEnvFilename = null;

    public function readCommaSeparatedOption(string $optionName): ?array
    {
        $optionValue = $this->option($optionName);
        if (!$optionValue) {
            return null;
        }
        return $this->readCommaSeparated($optionValue);
    }

    public function readCommaSeparated(string $input): array
    {
        return array_filter(array_map('trim', explode(',', $input)));
    }

    /**
     * @throws ErrorException
     */
    public function setInDotenv(string $key, ?string $value)
    {
        if ($value === null) {
            throw new ErrorException('No value provided for ' . $key);
        }
        $envContents = explode("\n", file_get_contents($this->getDotenvFilename()));
        $found = false;
        foreach ($envContents as &$line) {
            if (str_starts_with($line, $key . '=')) {
                $found = true;
                $line = $key . '=' . $value;
                break;
            }
        }
        if ($found === false) {
            $envContents[] = $key . '=' . $value;
        }
        file_put_contents($this->getDotenvFilename(), implode("\n", $envContents));
    }

    /**
     * @throws ErrorException
     */
    public function getFromDotenv(string $key): ?string
    {
        $dotenv = new Dotenv();
        $dotenv->load($this->getDotenvFilename());
        return getenv($key) ?? null;
    }

    /**
     * @throws ErrorException
     */
    protected function getDotenvFilename(): string
    {
        if ($this->_dotEnvFilename === null) {
            $this->_dotEnvFilename = realpath(__DIR__ . '/../../../../.env');
            if (File::exists($this->_dotEnvFilename) === false) {
                throw new ErrorException('The dotenv file is not found at '. $this->_dotEnvFilename);
            }
        }
        return $this->_dotEnvFilename;
    }

    protected function readScannerConfig(string $fileName): array
    {
        $configFileName = base_path('scanner-config/' . $fileName);
        if (File::exists($configFileName) === false) {
            return [];
        }
        return array_filter(explode("\n", file_get_contents($configFileName)));
    }

    protected function writeScannerConfig(string $fileName, array $data)
    {
        $configFileName = base_path('scanner-config/' . $fileName);
        file_put_contents($configFileName, implode("\n", $data) . "\n");
    }

    protected function askOptionOrConfig(string $optionName, string $configFile, string $question)
    {
        $data = $this->readCommaSeparatedOption($optionName);
        if ($data === null) {
            $data = $this->readScannerConfig($configFile);
        }
        $data = $this->readCommaSeparated($this->ask($question, implode(',', $data)));
        $this->writeScannerConfig($configFile, $data);
    }

}
